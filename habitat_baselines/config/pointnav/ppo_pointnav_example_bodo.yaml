# Note:  This is an example config, see habitat_baselines/config/pointnav/ppo_pointnav.yaml
# for better hyperparameters for actual training

VERBOSE: False

BASE_TASK_CONFIG_PATH: "configs/tasks/pointnav_gibson.yaml"
TRAINER_NAME: "ppo"
ENV_NAME: "NavRLEnv"
SIMULATOR_GPU_ID: 2
TORCH_GPU_ID: 2
VIDEO_OPTION: ["disk", "tensorboard"]
TENSORBOARD_DIR: "tb/phosphenes"
VIDEO_DIR: "video_dir/phosphenes"
# To evaluate on all episodes, set this to -1
TEST_EPISODE_COUNT: 5
EVAL_CKPT_PATH_DIR: "data/new_checkpoints/phosphenes/ckpt.93.pth" #"data/checkpoints/gibson-rgb-best.pth"
NUM_ENVIRONMENTS: 6
SENSORS: ["RGB_SENSOR"]#, "DEPTH_SENSOR"]
CHECKPOINT_FOLDER: "data/new_checkpoints/phosphenes"
NUM_UPDATES: -1
TOTAL_NUM_STEPS: 1e6
LOG_INTERVAL: 25
NUM_CHECKPOINTS: 100
# Force PyTorch to be single threaded as
# this improves performance considerably
FORCE_TORCH_SINGLE_THREADED: True

EVAL:
  USE_CKPT_CONFIG: False

RL:
  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 4
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 1e-4
    eps: 1e-5
    max_grad_norm: 0.5
    num_steps: 128
    hidden_size: 512
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: True
    use_linear_lr_decay: True
    reward_window_size: 50
    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False
  DDPPO:
    reset_critic: False
    pretrained: True
    pretrained_weights: "data/checkpoints/gibson-rgb-best.pth"
  POLICY:
    OBS_TRANSFORMS:
      ENABLED_TRANSFORMS: [GrayScale, EdgeFilter, Phosphenes]
      EDGE_FILTER:
        SIGMA: 3
        THRESHOLD_LOW: 20
        THRESHOLD_HIGH: 40
      PHOSPHENES:
        SIZE: [256, 256]
        RESOLUTION: 32
        SIGMA: 2
